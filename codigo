import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk

DB = "alunos.db"


def conectar():
    return sqlite3.connect(DB)


def criar_tabela():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS alunos (
            id TEXT PRIMARY KEY,
            matricula TEXT UNIQUE NOT NULL,
            nome TEXT NOT NULL,
            data_nascimento TEXT NOT NULL
        )
    """)
    conn.commit()
    conn.close()


def inserir_aluno():
    id_ = entry_id.get().strip()
    matricula = entry_matricula.get().strip()
    nome = entry_nome.get().strip()
    data_nascimento = entry_data.get().strip()

    if not id_ or not matricula or not nome or not data_nascimento:
        messagebox.showwarning("Atenção", "Preencha todos os campos!")
        return

    try:
        conn = conectar()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO alunos VALUES (?, ?, ?, ?)",
                       (id_, matricula, nome, data_nascimento))
        conn.commit()
        messagebox.showinfo("Sucesso", "Aluno inserido com sucesso!")
        listar_alunos()
        limpar_campos()
    except sqlite3.IntegrityError:
        messagebox.showerror("Erro", "ID ou matrícula já cadastrados!")
    finally:
        conn.close()


def excluir_aluno():
    matricula = entry_matricula.get().strip()
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM alunos WHERE matricula = ?", (matricula, ))
    if cursor.rowcount:
        messagebox.showinfo("Sucesso", "Aluno excluído.")
        listar_alunos()
        limpar_campos()
    else:
        messagebox.showerror("Erro", "Aluno não encontrado.")
    conn.commit()
    conn.close()


def editar_aluno():
    matricula = entry_matricula.get().strip()
    nome = entry_nome.get().strip()
    data_nascimento = entry_data.get().strip()

    conn = conectar()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE alunos SET nome = ?, data_nascimento = ? WHERE matricula = ?",
        (nome, data_nascimento, matricula))
    if cursor.rowcount:
        messagebox.showinfo("Sucesso", "Aluno atualizado.")
        listar_alunos()
        limpar_campos()
    else:
        messagebox.showerror("Erro", "Aluno não encontrado.")
    conn.commit()
    conn.close()


def listar_alunos():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT id, matricula, nome, data_nascimento FROM alunos")
    rows = cursor.fetchall()
    tabela.delete(*tabela.get_children())
    for row in rows:
        tabela.insert("", tk.END, values=row)
    conn.close()


def buscar_aluno():
    termo = entry_busca.get().strip()
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id, matricula, nome, data_nascimento FROM alunos WHERE matricula = ? OR id = ?",
        (termo, termo))
    row = cursor.fetchone()
    if row:
        entry_id.delete(0, tk.END)
        entry_matricula.delete(0, tk.END)
        entry_nome.delete(0, tk.END)
        entry_data.delete(0, tk.END)
        entry_id.insert(0, row[0])
        entry_matricula.insert(0, row[1])
        entry_nome.insert(0, row[2])
        entry_data.insert(0, row[3])
    else:
        messagebox.showerror("Erro", "Aluno não encontrado.")
    conn.close()


def limpar_campos():
    entry_id.delete(0, tk.END)
    entry_matricula.delete(0, tk.END)
    entry_nome.delete(0, tk.END)
    entry_data.delete(0, tk.END)


# ----- INTERFACE GRÁFICA -----
criar_tabela()

root = tk.Tk()
root.title("Cadastro de Alunos")

# Formulário
tk.Label(root, text="ID:").grid(row=0, column=0, sticky="w")
entry_id = tk.Entry(root)
entry_id.grid(row=0, column=1)

tk.Label(root, text="Matrícula:").grid(row=1, column=0, sticky="w")
entry_matricula = tk.Entry(root)
entry_matricula.grid(row=1, column=1)

tk.Label(root, text="Nome:").grid(row=2, column=0, sticky="w")
entry_nome = tk.Entry(root)
entry_nome.grid(row=2, column=1)

tk.Label(root, text="Data de Nascimento:").grid(row=3, column=0, sticky="w")
entry_data = tk.Entry(root)
entry_data.grid(row=3, column=1)

# Botões
tk.Button(root, text="Inserir", command=inserir_aluno).grid(row=4,
                                                            column=0,
                                                            pady=5)
tk.Button(root, text="Editar", command=editar_aluno).grid(row=4,
                                                          column=1,
                                                          pady=5)
tk.Button(root, text="Excluir", command=excluir_aluno).grid(row=4,
                                                            column=2,
                                                            pady=5)

# Busca
tk.Label(root, text="Buscar por ID ou Matrícula:").grid(row=5,
                                                        column=0,
                                                        sticky="w")
entry_busca = tk.Entry(root)
entry_busca.grid(row=5, column=1)
tk.Button(root, text="Buscar", command=buscar_aluno).grid(row=5, column=2)

# Tabela
colunas = ("id", "matricula", "nome", "data_nascimento")
tabela = ttk.Treeview(root, columns=colunas, show="headings")
for col in colunas:
    tabela.heading(col, text=col.capitalize())
    tabela.column(col, width=150)
tabela.grid(row=6, column=0, columnspan=3, pady=10)

# Inicializa a tabela
listar_alunos()

# Inicia a aplicação
root.mainloop()
